esphome:
  name: air-quality
  friendly_name: Air Quality
  platformio_options:
    board_build.flash_mode: dio
  includes:
    - aqi.h

esp32:
  board: adafruit_feather_esp32s3
  variant: esp32s3
  framework:
    type: arduino

logger:
  level: INFO


# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password


captive_portal:
    

i2c:
  - id: bus_a
    sda: GPIO41
    scl: GPIO40
    frequency: 50kHz #the PMSA003i seems unhappy at higher speed i2c busses
    scan: true

switch:
  - platform: gpio
    id: neopix_power
    restore_mode: ALWAYS_ON
    pin: GPIO38


sensor: 
  # Raw sensor values updated at 1s, but kept internal to be used for
  # template sensor values exposed to HA
  - platform: pmsa003i
    i2c_id: bus_a
    address: 0x12
    pm_1_0:
      id: pm_1_0_raw
    pm_2_5:
      id: pm_2_5_raw
    pm_10_0:
      id: pm_10_raw
    pmc_0_3:
      id: pmc_0_3_raw
    pmc_0_5:
      id: pmc_0_5_raw
    pmc_1_0:
      id: pmc_1_0_raw
    pmc_2_5:
      id: pmc_2_5_raw
    pmc_5_0:
      id: pmc_5_0_raw
    pmc_10_0:
      id: pmc_10_0_raw
    update_interval: 1s


  - platform: template
    name: "PM1.0"
    id: pm_1_0
    device_class: PM1
    unit_of_measurement: µg/m³
    icon: mdi:grain
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pm_1_0_raw).state);"
  - platform: template
    name: "PM2.5"
    id: pm_2_5
    device_class: PM25
    icon: mdi:smoke
    unit_of_measurement: µg/m³
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pm_2_5_raw).state);"
  - platform: template
    name: "PM10.0"
    id: pm_10
    device_class: PM10
    icon: mdi:flower-pollen
    unit_of_measurement: µg/m³
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pm_10_raw).state);"

  - platform: template
    name: "PMC <0.3µm"
    id: pmc_0_3
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pmc_0_3_raw).state);"
  - platform: template
    name: "PMC <0.5µm"
    id: pmc_0_5
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pmc_0_5_raw).state);"
  - platform: template
    name: "PMC <1µm"
    id: pmc_1_0
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pmc_1_0_raw).state);"
  - platform: template
    name: "PMC <2.5µm"
    id: pmc_2_5

    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pmc_2_5_raw).state);"
  - platform: template
    name: "PMC <5µm"
    id: pmc_5_0

    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pmc_5_0_raw).state);"
  - platform: template
    name: "PMC <10µm"
    id: pmc_10_0

    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: "return(id(pmc_10_0_raw).state);"


  - platform: template
    name: "AQI"
    id: pm2_5_aqi
    unit_of_measurement: AQI
    device_class: AQI
    state_class: measurement
    icon: mdi:weather-hazy
    accuracy_decimals: 0
    filters:
      - clamp:
          min_value: 0.0
          max_value: 500
      - sliding_window_moving_average:
          window_size: 15
          send_every: 15
          send_first_at: 15
    lambda: |-
      float pm2_5 = id(pm_2_5_raw).state;
      float pm10 = id(pm_10_raw).state;
      float aqi2_5 = get_pm2_5_aqi(pm2_5);
      float aqi10 = get_pm10_aqi(pm10);
      float aqi = aqi2_5 > aqi10 ? aqi2_5 : aqi10;
      ESP_LOGI("AQI", "Computed AQI: %.2f from %.2f PM2.5 and %.2f PM10", aqi, pm2_5, pm10);
      return(aqi);

    update_interval: 1s


light:
  - platform: neopixelbus
    id: neopixel_led
    type: GRB
    variant: WS2812
    pin: GPIO39
    num_leds: 1
    name: "NeoPixel"
